@file:Suppress("NOTHING_TO_INLINE")package ru.airdead.hudrender.stuffimport net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworkingimport net.fabricmc.fabric.api.networking.v1.PacketSenderimport net.minecraft.client.MinecraftClientimport net.minecraft.client.network.ClientPlayNetworkHandlerimport net.minecraft.network.PacketByteBufimport net.minecraft.util.Identifierimport ru.airdead.hudrender.event.Eventimport ru.airdead.hudrender.event.EventManager.eventListenersimport ru.airdead.hudrender.net.BufferContextimport ru.airdead.hudrender.net.BufferHandler/** * A class that provides client-side API functionalities. */class ClientApi {    /**     * Retrieves the instance of the Minecraft client.     *     * @return The instance of the Minecraft client, or null if not available.     */    fun minecraft(): MinecraftClient? = MinecraftClient.getInstance()    /**     * Registers a listener for a specific channel.     *     * @param channel The channel to listen for.     * @param listener The listener function to be called when a packet is received.     */    fun registerListener(channel: Identifier, listener: BufferHandler) {        ClientPlayNetworking.registerGlobalReceiver(channel) { client: MinecraftClient?, handler: ClientPlayNetworkHandler?, buf: PacketByteBuf, sender: PacketSender? ->            client?.let {                listener.invoke(BufferContext(buf, client, handler, sender))            }        }    }    /**     * Registers an event listener for a specific event class.     *     * @param T The type of the event.     * @param eventClass The class of the event to listen for.     * @param listener The listener function to be called when the event is triggered.     */    fun <T : Event> registerEvent(eventClass: Class<T>, listener: (T) -> Unit) {        @Suppress("UNCHECKED_CAST")        eventListeners.computeIfAbsent(eventClass) { mutableListOf() }.add(listener as (Event) -> Unit)    }    /**     * Registers an event listener for a specific event class using reified type parameters.     *     * @param T The type of the event.     * @param listener The listener function to be called when the event is triggered.     */    inline fun <reified T : Event> onEvent(noinline listener: (T) -> Unit) {        registerEvent(T::class.java, listener)    }    /**     * Registers a listener for a specific channel using reified type parameters.     *     * @param channel The channel to listen for.     * @param listener The listener function to be called when a packet is received.     */    inline fun onPluginMessage(channel: Identifier, noinline listener: BufferHandler) {        registerListener(channel, listener)    }}